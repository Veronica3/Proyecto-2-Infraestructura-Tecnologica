
package Vista_Sistema_Simulacion;
import proyecto2.manejomemoria.*;
import javax.swing.JOptionPane;
import java.util.*;

public class Vista_Configuracion_del_Sistema extends javax.swing.JFrame {

    /**
     * Creates new form Vista_Configuracion_del_Sistema
     */
    //Atributos
    int Tiempo_de_Limpieza;
    int Minimo_Marcos;
    int Maximo_Marcos;
    int Tamano_aumento;
    int Grado_Multiprogramacion;
    int Working_Set;
    int Tamaño_Memoria_Fisica;
    int Bits;//Tamaño de las direcciones
    int Tamaño_Paginas;
    String Unidad_Medida= "KB";
    int Visualizar_Memorias_Cantidad_Referencias;
    String Politica_Recuperacion;
    String Politica_Ubicacion;
    String Politica_Reemplazo;
    String Politica_Limpieza;
    String Tamaño_Conjunto;
    String Ambito_Reemplazo;
    
    public Vista_Configuracion_del_Sistema() {
        initComponents();
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void Validar_Entrada_Numeros(java.awt.event.KeyEvent evt){
     char c= evt.getKeyChar();//solo acepta numeros
        if (!Character.isDigit(c) && (!Character.isISOControl(c)))//(c<'0' || c>'9')
            
            evt.consume();
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Grupo_RB_Política_Recuperación = new javax.swing.ButtonGroup();
        Grupo_RB_Política_Ubicación = new javax.swing.ButtonGroup();
        Grupo_RB_Política_Reemplazo = new javax.swing.ButtonGroup();
        Grupo_RB_Tamaño_residente = new javax.swing.ButtonGroup();
        Grupo_RB_Ambito_reemplazo_residente = new javax.swing.ButtonGroup();
        Grupo_RB_Política_Limpieza = new javax.swing.ButtonGroup();
        Configuración_Sistema = new javax.swing.JLabel();
        Descripción_Programa = new javax.swing.JLabel();
        Indicaciones_Programa = new javax.swing.JLabel();
        Política_recuperación = new javax.swing.JLabel();
        RB_Bajo_Demanda = new javax.swing.JRadioButton();
        RB_Paginación_Adelantada = new javax.swing.JRadioButton();
        Política_Ubicación = new javax.swing.JLabel();
        RB_Primer_Ajuste = new javax.swing.JRadioButton();
        RB_Siguiente_Ajuste = new javax.swing.JRadioButton();
        Política_reemplazo = new javax.swing.JLabel();
        RB_MRU = new javax.swing.JRadioButton();
        RB_LRU = new javax.swing.JRadioButton();
        RB_FIFO = new javax.swing.JRadioButton();
        RB_Reloj = new javax.swing.JRadioButton();
        Gestión_conjunto_residente = new javax.swing.JLabel();
        Tamaño_Conjunto_residente = new javax.swing.JLabel();
        RB_Fijo = new javax.swing.JRadioButton();
        RB_Variable = new javax.swing.JRadioButton();
        Ambito_reemplazo_conjunto = new javax.swing.JLabel();
        RB_Global = new javax.swing.JRadioButton();
        RB_Local = new javax.swing.JRadioButton();
        Política_Limpieza = new javax.swing.JLabel();
        RB_Bajo_Demanda_L = new javax.swing.JRadioButton();
        RB_Limpieza_adelantada = new javax.swing.JRadioButton();
        Control_carga = new javax.swing.JLabel();
        Grado_multiprogramación = new javax.swing.JLabel();
        Text_Grado_Multiprogramación = new javax.swing.JTextField();
        Indicaciones2 = new javax.swing.JLabel();
        Indicaciones_tamaño_memorias = new javax.swing.JLabel();
        Cantidad_memoria = new javax.swing.JLabel();
        Text_Tamaño_direcciones = new javax.swing.JTextField();
        bits = new javax.swing.JLabel();
        Distribucción_direcciones = new javax.swing.JLabel();
        Tamaño_pagina = new javax.swing.JLabel();
        Text_tamaño_pagina = new javax.swing.JTextField();
        Indicación3 = new javax.swing.JLabel();
        Cantidad_memoria_fisica = new javax.swing.JLabel();
        Text_Cantidad_memoria_fisica = new javax.swing.JTextField();
        KB = new javax.swing.JLabel();
        Visualizar_estado = new javax.swing.JLabel();
        Cantidad_referencias = new javax.swing.JLabel();
        Text_Cantidad_referencias = new javax.swing.JTextField();
        Botón_Crear_Sistema = new javax.swing.JButton();
        Salir = new javax.swing.JButton();
        Botón_Regresar = new javax.swing.JButton();
        Tiempo_Limpieza = new javax.swing.JLabel();
        Text_Tiempo_Limpieza = new javax.swing.JTextField();
        Cantidad_Tamaño_Conjuto_residente = new javax.swing.JLabel();
        Text_Tamaño_conjunto_residente = new javax.swing.JTextField();
        Minimo = new javax.swing.JLabel();
        Text_Minimo = new javax.swing.JTextField();
        Maximo = new javax.swing.JLabel();
        Text_Maximo = new javax.swing.JTextField();
        Periodo_aumento_conjunto_resident = new javax.swing.JLabel();
        Text_Periodo_aumento = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));
        setForeground(new java.awt.Color(0, 153, 153));

        Configuración_Sistema.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Configuración_Sistema.setText("Configuración del sistema");

        Descripción_Programa.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Descripción_Programa.setText("Programa de simulación de gestión de memoria.");

        Indicaciones_Programa.setText("Existen diferentes algoritmos para los aspectos de la gestión de la memoria ");

        Política_recuperación.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Política_recuperación.setText("Política de recuperación");

        Grupo_RB_Política_Recuperación.add(RB_Bajo_Demanda);
        RB_Bajo_Demanda.setText("Bajo Demanda");

        Grupo_RB_Política_Recuperación.add(RB_Paginación_Adelantada);
        RB_Paginación_Adelantada.setText("Paginación Adelantada");

        Política_Ubicación.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Política_Ubicación.setText("Política de ubicación");

        Grupo_RB_Política_Ubicación.add(RB_Primer_Ajuste);
        RB_Primer_Ajuste.setText("Primer Ajuste");
        RB_Primer_Ajuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_Primer_AjusteActionPerformed(evt);
            }
        });

        Grupo_RB_Política_Ubicación.add(RB_Siguiente_Ajuste);
        RB_Siguiente_Ajuste.setText("Siguiente Ajuste");
        RB_Siguiente_Ajuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_Siguiente_AjusteActionPerformed(evt);
            }
        });

        Política_reemplazo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Política_reemplazo.setText("Política de reemplazo");

        Grupo_RB_Política_Reemplazo.add(RB_MRU);
        RB_MRU.setText("Más recientemente utilizado");

        Grupo_RB_Política_Reemplazo.add(RB_LRU);
        RB_LRU.setText("Usado menos recientemente");

        Grupo_RB_Política_Reemplazo.add(RB_FIFO);
        RB_FIFO.setText("FIFO");

        Grupo_RB_Política_Reemplazo.add(RB_Reloj);
        RB_Reloj.setText("Del reloj");

        Gestión_conjunto_residente.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Gestión_conjunto_residente.setText("Gestión del conjunto residente");

        Tamaño_Conjunto_residente.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        Tamaño_Conjunto_residente.setText("Tamaño del conjunto residente");

        Grupo_RB_Tamaño_residente.add(RB_Fijo);
        RB_Fijo.setText("Fijo");
        RB_Fijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_FijoActionPerformed(evt);
            }
        });

        Grupo_RB_Tamaño_residente.add(RB_Variable);
        RB_Variable.setText("Variable");
        RB_Variable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_VariableActionPerformed(evt);
            }
        });
        RB_Variable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RB_VariableKeyPressed(evt);
            }
        });

        Ambito_reemplazo_conjunto.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        Ambito_reemplazo_conjunto.setText("Ámbito de reemplazo");

        Grupo_RB_Ambito_reemplazo_residente.add(RB_Global);
        RB_Global.setText("Global");
        RB_Global.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_GlobalActionPerformed(evt);
            }
        });

        Grupo_RB_Ambito_reemplazo_residente.add(RB_Local);
        RB_Local.setText("Local");

        Política_Limpieza.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Política_Limpieza.setText("Política de limpieza");

        Grupo_RB_Política_Limpieza.add(RB_Bajo_Demanda_L);
        RB_Bajo_Demanda_L.setText("Bajo demanda");
        RB_Bajo_Demanda_L.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_Bajo_Demanda_LActionPerformed(evt);
            }
        });

        Grupo_RB_Política_Limpieza.add(RB_Limpieza_adelantada);
        RB_Limpieza_adelantada.setText("Limpieza adelantada");
        RB_Limpieza_adelantada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_Limpieza_adelantadaActionPerformed(evt);
            }
        });
        RB_Limpieza_adelantada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RB_Limpieza_adelantadaKeyPressed(evt);
            }
        });

        Control_carga.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Control_carga.setText("Control de carga");

        Grado_multiprogramación.setText("Grado multiprogramación:");

        Text_Grado_Multiprogramación.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Text_Grado_MultiprogramaciónActionPerformed(evt);
            }
        });
        Text_Grado_Multiprogramación.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_Grado_MultiprogramaciónKeyTyped(evt);
            }
        });

        Indicaciones2.setText("Escoger un algoritmo para cada aspecto de la gestión de memoria:");

        Indicaciones_tamaño_memorias.setText("Asignación del tamaño de la memoria física y el tamaño de la memoria virtual");

        Cantidad_memoria.setText("Tamaño de direcciones:");

        Text_Tamaño_direcciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_Tamaño_direccionesKeyTyped(evt);
            }
        });

        bits.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bits.setText("bits");

        Distribucción_direcciones.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Distribucción_direcciones.setText("Distribución en bits de las direcciones");

        Tamaño_pagina.setText("Tamaño de página:");

        Text_tamaño_pagina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_tamaño_paginaKeyTyped(evt);
            }
        });

        Indicación3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Indicación3.setText("La unidad de medida que utiliza la memoria son Kilobytes (KB)");

        Cantidad_memoria_fisica.setText("Cantidad memoria física: ");

        Text_Cantidad_memoria_fisica.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_Cantidad_memoria_fisicaKeyTyped(evt);
            }
        });

        KB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        KB.setText("KB");

        Visualizar_estado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Visualizar_estado.setText("Visualizar estado memoria virtual y memoria física");

        Cantidad_referencias.setText("Cantidad de referencias para visualizar estado memoria física y virtual: ");

        Text_Cantidad_referencias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_Cantidad_referenciasKeyTyped(evt);
            }
        });

        Botón_Crear_Sistema.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Botón_Crear_Sistema.setText("Crear Sistema");
        Botón_Crear_Sistema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Botón_Crear_SistemaActionPerformed(evt);
            }
        });

        Salir.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        Botón_Regresar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Botón_Regresar.setText("Regresar");
        Botón_Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Botón_RegresarActionPerformed(evt);
            }
        });

        Tiempo_Limpieza.setText("Tiempo de limpieza:");
        Tiempo_Limpieza.setEnabled(false);

        Text_Tiempo_Limpieza.setEnabled(false);
        Text_Tiempo_Limpieza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Text_Tiempo_LimpiezaActionPerformed(evt);
            }
        });
        Text_Tiempo_Limpieza.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_Tiempo_LimpiezaKeyTyped(evt);
            }
        });

        Cantidad_Tamaño_Conjuto_residente.setText("Tamaño:");

        Text_Tamaño_conjunto_residente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Text_Tamaño_conjunto_residenteActionPerformed(evt);
            }
        });
        Text_Tamaño_conjunto_residente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_Tamaño_conjunto_residenteKeyTyped(evt);
            }
        });

        Minimo.setText("Mínimo:");
        Minimo.setEnabled(false);

        Text_Minimo.setEnabled(false);
        Text_Minimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Text_MinimoActionPerformed(evt);
            }
        });
        Text_Minimo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_MinimoKeyTyped(evt);
            }
        });

        Maximo.setText("Máximo:");
        Maximo.setEnabled(false);

        Text_Maximo.setEnabled(false);
        Text_Maximo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_MaximoKeyTyped(evt);
            }
        });

        Periodo_aumento_conjunto_resident.setText("Periodo de aumento:");
        Periodo_aumento_conjunto_resident.setEnabled(false);

        Text_Periodo_aumento.setEnabled(false);
        Text_Periodo_aumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Text_Periodo_aumentoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Configuración_Sistema)
                .addGap(390, 390, 390))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Descripción_Programa, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Indicaciones_Programa)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(Indicaciones2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Política_recuperación)
                                            .addComponent(RB_Bajo_Demanda)
                                            .addComponent(RB_Paginación_Adelantada)
                                            .addComponent(Política_Ubicación)
                                            .addComponent(RB_Primer_Ajuste)
                                            .addComponent(RB_Siguiente_Ajuste))
                                        .addGap(78, 78, 78)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Gestión_conjunto_residente)
                                            .addComponent(RB_Local)
                                            .addComponent(RB_Fijo)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Cantidad_Tamaño_Conjuto_residente)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Text_Tamaño_conjunto_residente, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(Periodo_aumento_conjunto_resident)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Text_Periodo_aumento, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(RB_Global)
                                            .addComponent(Ambito_reemplazo_conjunto)
                                            .addComponent(RB_Variable)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Minimo)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(Text_Minimo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(Maximo)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Text_Maximo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(Tamaño_Conjunto_residente))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Indicaciones_tamaño_memorias)
                                    .addComponent(Distribucción_direcciones)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Tamaño_pagina)
                                                .addGap(46, 46, 46)
                                                .addComponent(Text_tamaño_pagina, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(Cantidad_memoria)
                                                .addGap(18, 18, 18)
                                                .addComponent(Text_Tamaño_direcciones, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bits))
                                    .addComponent(Indicación3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Cantidad_memoria_fisica)
                                        .addGap(33, 33, 33)
                                        .addComponent(Text_Cantidad_memoria_fisica, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(KB, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Política_reemplazo)
                                    .addComponent(RB_MRU)
                                    .addComponent(RB_FIFO)
                                    .addComponent(RB_Reloj)
                                    .addComponent(RB_LRU))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RB_Limpieza_adelantada)
                                    .addComponent(RB_Bajo_Demanda_L)
                                    .addComponent(Política_Limpieza)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(21, 21, 21)
                                            .addComponent(Tiempo_Limpieza)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Text_Tiempo_Limpieza, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(1, 1, 1)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(Control_carga)
                                                    .addGap(54, 54, 54))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(Grado_multiprogramación)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(Text_Grado_Multiprogramación, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addComponent(Botón_Crear_Sistema))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(Salir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(61, 61, 61)
                                        .addComponent(Botón_Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(251, 251, 251)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Visualizar_estado)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Cantidad_referencias)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Text_Cantidad_referencias, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)))))))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Descripción_Programa)
                .addGap(2, 2, 2)
                .addComponent(Configuración_Sistema)
                .addGap(18, 18, 18)
                .addComponent(Indicaciones_Programa, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Indicaciones2)
                    .addComponent(Indicaciones_tamaño_memorias))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(Distribucción_direcciones)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Tamaño_pagina, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Text_tamaño_pagina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Política_recuperación)
                            .addComponent(Gestión_conjunto_residente)
                            .addComponent(Cantidad_memoria)
                            .addComponent(Text_Tamaño_direcciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bits))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RB_Bajo_Demanda)
                            .addComponent(Tamaño_Conjunto_residente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RB_Paginación_Adelantada)
                            .addComponent(RB_Fijo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RB_Variable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Indicación3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Cantidad_Tamaño_Conjuto_residente)
                                .addComponent(Text_Tamaño_conjunto_residente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Periodo_aumento_conjunto_resident)
                                .addComponent(Text_Periodo_aumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(Política_Ubicación))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Minimo)
                                            .addComponent(Text_Minimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Maximo)
                                            .addComponent(Text_Maximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(RB_Primer_Ajuste)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(RB_Siguiente_Ajuste))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(Ambito_reemplazo_conjunto)
                                        .addGap(5, 5, 5)
                                        .addComponent(RB_Global)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(RB_Local))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Cantidad_memoria_fisica)
                                .addComponent(Text_Cantidad_memoria_fisica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(KB)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(Visualizar_estado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Cantidad_referencias)
                            .addComponent(Text_Cantidad_referencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(68, 68, 68)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Tiempo_Limpieza)
                                            .addComponent(Text_Tiempo_Limpieza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Política_Limpieza)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(RB_Bajo_Demanda_L)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RB_Limpieza_adelantada)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Grado_multiprogramación)
                                            .addComponent(Text_Grado_Multiprogramación, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(Control_carga)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Política_reemplazo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RB_MRU, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RB_FIFO)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RB_LRU)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RB_Reloj, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Botón_Crear_Sistema)
                            .addComponent(Salir)
                            .addComponent(Botón_Regresar))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RB_Siguiente_AjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_Siguiente_AjusteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RB_Siguiente_AjusteActionPerformed

    private void RB_Primer_AjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_Primer_AjusteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RB_Primer_AjusteActionPerformed

    private void RB_GlobalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_GlobalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RB_GlobalActionPerformed

    private void Text_Grado_MultiprogramaciónActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Text_Grado_MultiprogramaciónActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Text_Grado_MultiprogramaciónActionPerformed

    private void Text_Grado_MultiprogramaciónKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_Grado_MultiprogramaciónKeyTyped
       
    }//GEN-LAST:event_Text_Grado_MultiprogramaciónKeyTyped

    private void Text_Tamaño_direccionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_Tamaño_direccionesKeyTyped
        Validar_Entrada_Numeros(evt);
    }//GEN-LAST:event_Text_Tamaño_direccionesKeyTyped

    private void Text_tamaño_paginaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_tamaño_paginaKeyTyped
        Validar_Entrada_Numeros(evt);
    }//GEN-LAST:event_Text_tamaño_paginaKeyTyped

    private void Text_Cantidad_memoria_fisicaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_Cantidad_memoria_fisicaKeyTyped
        Validar_Entrada_Numeros(evt);
    }//GEN-LAST:event_Text_Cantidad_memoria_fisicaKeyTyped

    private void Text_Cantidad_referenciasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_Cantidad_referenciasKeyTyped
         Validar_Entrada_Numeros(evt);
    }//GEN-LAST:event_Text_Cantidad_referenciasKeyTyped
    
    private boolean Validar_Campos_Llenos(){//Valida que los campos de texto tenga numeros
         if((this.Text_Tiempo_Limpieza.getText().length()==0)&&(this.RB_Limpieza_adelantada.isSelected())){
            return false;
        }
         else if((this.Text_Minimo.getText().length()==0)&&(this.RB_Variable.isSelected())){
            return false;
        }
        else if((this.Text_Maximo.getText().length()==0)&&(this.RB_Variable.isSelected())){
            return false;
        }
        else if((this.Text_Periodo_aumento.getText().length()==0)&&(this.RB_Variable.isSelected())){
            return false;
        }
         else if(this.Text_Grado_Multiprogramación.getText().length()==0){
            return false;
        }
        else if(this.Text_Tamaño_conjunto_residente.getText().length()==0){
            return false;
        }
        else if(this.Text_Cantidad_memoria_fisica.getText().length()==0){
            return false;
        }
        else if(this.Text_Tamaño_direcciones.getText().length()==0){
            return false;
        }
        else if( this.Text_tamaño_pagina.getText().length()==0){
            return false;
        }
       else
            return true;
    }
      private boolean Datos_Working_Set_Variable_Correctos(){
          Minimo_Marcos=Integer.parseInt(this.Text_Minimo.getText());
          Maximo_Marcos=Integer.parseInt(this.Text_Maximo.getText());
          Tamano_aumento=Integer.parseInt(this.Text_Periodo_aumento.getText());
          if (Minimo_Marcos>Maximo_Marcos){
               JOptionPane.showMessageDialog(null,"Revise los numeros ingresados, el mínimo de marcos es mayor que el máximo de marcos ","Dato inválido",JOptionPane.ERROR_MESSAGE);
                return false;
        }
            else if (Tamano_aumento==0){
           JOptionPane.showMessageDialog(null,"El tamaño de aumento del conjunto residente no puede ser 0","Dato inválido",JOptionPane.ERROR_MESSAGE);
            return false;        
            }
         return true;
            
      }
      
      private boolean Datos_Limpieza_adelantada_Correctos(){
           Tiempo_de_Limpieza=Integer.parseInt(this.Text_Tiempo_Limpieza.getText());
           if (Tiempo_de_Limpieza==0){
             JOptionPane.showMessageDialog(null,"El tiempo de limpieza no puede ser 0","Dato inválido",JOptionPane.ERROR_MESSAGE);
             return false;
        }
           return true;
      }
      private boolean Validar_Numeros_En_CamposTexto(){    
          if ((this.RB_Variable.isSelected())&& (!Datos_Working_Set_Variable_Correctos())) {
            return false;
          }
          if (this.RB_Limpieza_adelantada.isSelected()&& (!Datos_Limpieza_adelantada_Correctos())){
            return false;
          }
           Bits=Integer.parseInt(this.Text_Tamaño_direcciones.getText());//Tamaño de las direcciones
           Tamaño_Paginas= Integer.parseInt(this.Text_tamaño_pagina.getText());
          Grado_Multiprogramacion=Integer.parseInt(this.Text_Grado_Multiprogramación.getText());
          Working_Set=Integer.parseInt(this.Text_Tamaño_conjunto_residente.getText());
           Tamaño_Memoria_Fisica=Integer.parseInt(this.Text_Cantidad_memoria_fisica.getText());
           Visualizar_Memorias_Cantidad_Referencias=Integer.parseInt(this.Text_Cantidad_referencias.getText());

        //Validar que los minimos y maximos, el tamaño de direcciones este correcto
        if ((Tamaño_Paginas>Bits)|| (Tamaño_Paginas== Bits)){
            JOptionPane.showMessageDialog(null,"Revise los numeros ingresados, el tamaño de páginas debe ser menor que el tamaño de las direcciones ","Dato inválido",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        else if (Grado_Multiprogramacion==0){
           JOptionPane.showMessageDialog(null,"El grado de multiprogramación no puede ser 0","Dato inválido",JOptionPane.ERROR_MESSAGE);
            return false;
        }
       else if (Working_Set==0){
           JOptionPane.showMessageDialog(null,"El tamaño del conjunto residente no puede ser 0","Dato inválido",JOptionPane.ERROR_MESSAGE);
            return false;        
        }
       else if (Tamaño_Memoria_Fisica==0){
           JOptionPane.showMessageDialog(null,"El tamaño de memoria física no puede ser 0","Dato inválido",JOptionPane.ERROR_MESSAGE);
            return false;        
        }
        else if (Bits==0){
           JOptionPane.showMessageDialog(null,"El tamaño de las direcciones no puede ser 0","Dato inválido",JOptionPane.ERROR_MESSAGE);
            return false;        
        }
        else if (Tamaño_Paginas==0){
           JOptionPane.showMessageDialog(null,"El tamaño de página no puede ser 0","Dato inválido",JOptionPane.ERROR_MESSAGE);
            return false;        
        }
        else if (Visualizar_Memorias_Cantidad_Referencias==0){
           JOptionPane.showMessageDialog(null,"El periodo de visualización de las memorias no puede ser 0","Dato inválido",JOptionPane.ERROR_MESSAGE);
            return false;        
        }
        else{
            return true;
        }
      }
      private boolean Validar_Ambito_Reemplazo(){
          if (RB_Global.isSelected()){
              Ambito_Reemplazo="Global";
              return true;
          }
          else if (RB_Local.isSelected()){
              Ambito_Reemplazo="Local";
              return true;
          }
          else{
              JOptionPane.showMessageDialog(null,"No ha seleccionado ámbito de reemplazo","Seleccionar opción",JOptionPane.ERROR_MESSAGE);
              return false;
          }
      }
            private boolean Validar_Politica_Limpieza(){
          if (RB_Limpieza_adelantada.isSelected()){
              Politica_Limpieza="Limpieza adelantada";
              return true;
          }
          else if (RB_Bajo_Demanda_L.isSelected()){
             Politica_Limpieza="Demanda";
              return true;
          }
          else{
              JOptionPane.showMessageDialog(null,"No ha seleccionado la política de limpieza","Seleccionar opción",JOptionPane.ERROR_MESSAGE);
              return false;
          }
      }
        private boolean Validar_Politica_Recuperacion(){
          if (RB_Bajo_Demanda.isSelected()){
              Politica_Recuperacion="Bajo Demanda";
              return true;
          }
          else if (RB_Paginación_Adelantada.isSelected()){
             Politica_Limpieza="Paginacion adelantada";
              return true;
          }
          else{
              JOptionPane.showMessageDialog(null,"No ha seleccionado la política de recuperación","Seleccionar opción",JOptionPane.ERROR_MESSAGE);
              return false;
          }
      }
       private boolean Validar_Politica_Reemplazo(){
          if (RB_MRU.isSelected()){
              Politica_Reemplazo="MRU";
              return true;
          }
          else if (RB_FIFO.isSelected()){
             Politica_Reemplazo="FIFO";
              return true;
          }
         else if (RB_LRU.isSelected()){
             Politica_Reemplazo="LRU";
              return true;
          }
         else if (RB_Reloj.isSelected()){
             Politica_Reemplazo="Reloj";
              return true;
          }
          else{
              JOptionPane.showMessageDialog(null,"No ha seleccionado la política de reemplazo","Seleccionar opción",JOptionPane.ERROR_MESSAGE);
              return false;
          }
      }
           
      private boolean Validar_Politica_Ubicacion(){
          if (RB_Primer_Ajuste.isSelected()){
              Politica_Ubicacion="Primer Ajuste";
              return true;
          }
          else if (RB_Siguiente_Ajuste.isSelected()){
             Politica_Reemplazo="Siguiente Ajuste";
              return true;
          }
          else{
              JOptionPane.showMessageDialog(null,"No ha seleccionado la política de Ubicación","Seleccionar opción",JOptionPane.ERROR_MESSAGE);
              return false;
          }
      }
      private boolean Validar_Tamaño_Residente(){
          if (RB_Fijo.isSelected()){
              Tamaño_Conjunto="Fijo";
              return true;
          }
          else if (RB_Variable.isSelected()){
             Tamaño_Conjunto="Variable";
              return true;
          }
          else{
              JOptionPane.showMessageDialog(null,"No ha seleccionado el tipo de tamaño del conjunto residente","Seleccionar opción",JOptionPane.ERROR_MESSAGE);
              return false;
          }
      }
      
     //Validar que todos los radio buttos esten asignados
      private boolean Validar_Opciones_RadioButton(){
          if (!Validar_Ambito_Reemplazo()){
              return false;
          }
          else if (!Validar_Politica_Limpieza()){
              return false;
          }
          else if (!Validar_Politica_Recuperacion()){
              return false;
          }
          else if (!Validar_Politica_Reemplazo()){
              return false;
          }
          else if (!Validar_Politica_Ubicacion()){
              return false;
          }
          else if (!Validar_Tamaño_Residente()){
              return false;
          }
   
          return true;
      }
      
    private void Botón_Crear_SistemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Botón_Crear_SistemaActionPerformed
        //aquí inicializo el constructor del DTO
        if (Validar_Campos_Llenos()){
            if (Validar_Numeros_En_CamposTexto()){
                if(Validar_Opciones_RadioButton()){  
                proyecto2.manejomemoria.DTO Configuracion_sistema= new DTO( Politica_Recuperacion,  Politica_Ubicacion, 
                 Politica_Reemplazo,  Politica_Limpieza,  Tiempo_de_Limpieza,  Tamaño_Conjunto,  Minimo_Marcos,
                         Maximo_Marcos,  Tamano_aumento,  Ambito_Reemplazo,  Grado_Multiprogramacion,  Working_Set,
                                 Tamaño_Memoria_Fisica,  Bits,  Tamaño_Paginas,  Unidad_Medida);
            }
            }
        }
    }//GEN-LAST:event_Botón_Crear_SistemaActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SalirActionPerformed

    private void Botón_RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Botón_RegresarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Botón_RegresarActionPerformed

    private void Text_Tiempo_LimpiezaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_Tiempo_LimpiezaKeyTyped
      Validar_Entrada_Numeros(evt);
    }//GEN-LAST:event_Text_Tiempo_LimpiezaKeyTyped

    private void RB_Limpieza_adelantadaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RB_Limpieza_adelantadaKeyPressed

    }//GEN-LAST:event_RB_Limpieza_adelantadaKeyPressed

    private void Text_Tiempo_LimpiezaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Text_Tiempo_LimpiezaActionPerformed

    }//GEN-LAST:event_Text_Tiempo_LimpiezaActionPerformed

    private void Text_Tamaño_conjunto_residenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Text_Tamaño_conjunto_residenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Text_Tamaño_conjunto_residenteActionPerformed

    private void Text_Tamaño_conjunto_residenteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_Tamaño_conjunto_residenteKeyTyped
        Validar_Entrada_Numeros(evt);
    }//GEN-LAST:event_Text_Tamaño_conjunto_residenteKeyTyped

    private void Text_MinimoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_MinimoKeyTyped
        Validar_Entrada_Numeros(evt);
    }//GEN-LAST:event_Text_MinimoKeyTyped

    private void Text_Periodo_aumentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_Periodo_aumentoKeyTyped
      Validar_Entrada_Numeros(evt);
    }//GEN-LAST:event_Text_Periodo_aumentoKeyTyped

    private void Text_MinimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Text_MinimoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Text_MinimoActionPerformed

    private void Text_MaximoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Text_MaximoKeyTyped
      Validar_Entrada_Numeros(evt);
    }//GEN-LAST:event_Text_MaximoKeyTyped

    private void RB_VariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_VariableActionPerformed
        this.Periodo_aumento_conjunto_resident.setEnabled(true);
        this.Text_Periodo_aumento.setEnabled(true);
        this.Minimo.setEnabled(true);
        this.Maximo.setEnabled(true);
        this.Text_Minimo.setEnabled(true);
        this.Text_Maximo.setEnabled(true);
    }//GEN-LAST:event_RB_VariableActionPerformed

    private void RB_VariableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RB_VariableKeyPressed
      
    }//GEN-LAST:event_RB_VariableKeyPressed

    private void RB_FijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_FijoActionPerformed
      this.Periodo_aumento_conjunto_resident.setEnabled(false);
        this.Text_Periodo_aumento.setEnabled(false);
        this.Minimo.setEnabled(false);
        this.Maximo.setEnabled(false);
        this.Text_Minimo.setEnabled(false);
        this.Text_Maximo.setEnabled(false);
    }//GEN-LAST:event_RB_FijoActionPerformed

    private void RB_Limpieza_adelantadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_Limpieza_adelantadaActionPerformed
        this.Text_Tiempo_Limpieza.setEnabled(true);
        this.Tiempo_Limpieza.setEnabled(true);
    }//GEN-LAST:event_RB_Limpieza_adelantadaActionPerformed

    private void RB_Bajo_Demanda_LActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_Bajo_Demanda_LActionPerformed
        this.Text_Tiempo_Limpieza.setEnabled(false);
        this.Tiempo_Limpieza.setEnabled(false);
    }//GEN-LAST:event_RB_Bajo_Demanda_LActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista_Configuracion_del_Sistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista_Configuracion_del_Sistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista_Configuracion_del_Sistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista_Configuracion_del_Sistema.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista_Configuracion_del_Sistema().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Ambito_reemplazo_conjunto;
    private javax.swing.JButton Botón_Crear_Sistema;
    private javax.swing.JButton Botón_Regresar;
    private javax.swing.JLabel Cantidad_Tamaño_Conjuto_residente;
    private javax.swing.JLabel Cantidad_memoria;
    private javax.swing.JLabel Cantidad_memoria_fisica;
    private javax.swing.JLabel Cantidad_referencias;
    private javax.swing.JLabel Configuración_Sistema;
    private javax.swing.JLabel Control_carga;
    private javax.swing.JLabel Descripción_Programa;
    private javax.swing.JLabel Distribucción_direcciones;
    private javax.swing.JLabel Gestión_conjunto_residente;
    private javax.swing.JLabel Grado_multiprogramación;
    private javax.swing.ButtonGroup Grupo_RB_Ambito_reemplazo_residente;
    private javax.swing.ButtonGroup Grupo_RB_Política_Limpieza;
    private javax.swing.ButtonGroup Grupo_RB_Política_Recuperación;
    private javax.swing.ButtonGroup Grupo_RB_Política_Reemplazo;
    private javax.swing.ButtonGroup Grupo_RB_Política_Ubicación;
    private javax.swing.ButtonGroup Grupo_RB_Tamaño_residente;
    private javax.swing.JLabel Indicaciones2;
    private javax.swing.JLabel Indicaciones_Programa;
    private javax.swing.JLabel Indicaciones_tamaño_memorias;
    private javax.swing.JLabel Indicación3;
    private javax.swing.JLabel KB;
    private javax.swing.JLabel Maximo;
    private javax.swing.JLabel Minimo;
    private javax.swing.JLabel Periodo_aumento_conjunto_resident;
    private javax.swing.JLabel Política_Limpieza;
    private javax.swing.JLabel Política_Ubicación;
    private javax.swing.JLabel Política_recuperación;
    private javax.swing.JLabel Política_reemplazo;
    private javax.swing.JRadioButton RB_Bajo_Demanda;
    private javax.swing.JRadioButton RB_Bajo_Demanda_L;
    private javax.swing.JRadioButton RB_FIFO;
    private javax.swing.JRadioButton RB_Fijo;
    private javax.swing.JRadioButton RB_Global;
    private javax.swing.JRadioButton RB_LRU;
    private javax.swing.JRadioButton RB_Limpieza_adelantada;
    private javax.swing.JRadioButton RB_Local;
    private javax.swing.JRadioButton RB_MRU;
    private javax.swing.JRadioButton RB_Paginación_Adelantada;
    private javax.swing.JRadioButton RB_Primer_Ajuste;
    private javax.swing.JRadioButton RB_Reloj;
    private javax.swing.JRadioButton RB_Siguiente_Ajuste;
    private javax.swing.JRadioButton RB_Variable;
    private javax.swing.JButton Salir;
    private javax.swing.JLabel Tamaño_Conjunto_residente;
    private javax.swing.JLabel Tamaño_pagina;
    private javax.swing.JTextField Text_Cantidad_memoria_fisica;
    private javax.swing.JTextField Text_Cantidad_referencias;
    private javax.swing.JTextField Text_Grado_Multiprogramación;
    private javax.swing.JTextField Text_Maximo;
    private javax.swing.JTextField Text_Minimo;
    private javax.swing.JTextField Text_Periodo_aumento;
    private javax.swing.JTextField Text_Tamaño_conjunto_residente;
    private javax.swing.JTextField Text_Tamaño_direcciones;
    private javax.swing.JTextField Text_Tiempo_Limpieza;
    private javax.swing.JTextField Text_tamaño_pagina;
    private javax.swing.JLabel Tiempo_Limpieza;
    private javax.swing.JLabel Visualizar_estado;
    private javax.swing.JLabel bits;
    // End of variables declaration//GEN-END:variables
}
